// Code generated by counterfeiter. DO NOT EDIT.
package presignerfakes

import (
	"aws-s3-siggy/presigner"
	"context"
	"sync"

	v4 "github.com/aws/aws-sdk-go-v2/aws/signer/v4"
	"github.com/aws/aws-sdk-go-v2/service/s3"
)

type FakePresignClient struct {
	PresignDeleteObjectStub        func(context.Context, *s3.DeleteObjectInput, ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error)
	presignDeleteObjectMutex       sync.RWMutex
	presignDeleteObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectInput
		arg3 []func(*s3.PresignOptions)
	}
	presignDeleteObjectReturns struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}
	presignDeleteObjectReturnsOnCall map[int]struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}
	PresignGetObjectStub        func(context.Context, *s3.GetObjectInput, ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error)
	presignGetObjectMutex       sync.RWMutex
	presignGetObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []func(*s3.PresignOptions)
	}
	presignGetObjectReturns struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}
	presignGetObjectReturnsOnCall map[int]struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}
	PresignPutObjectStub        func(context.Context, *s3.PutObjectInput, ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error)
	presignPutObjectMutex       sync.RWMutex
	presignPutObjectArgsForCall []struct {
		arg1 context.Context
		arg2 *s3.PutObjectInput
		arg3 []func(*s3.PresignOptions)
	}
	presignPutObjectReturns struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}
	presignPutObjectReturnsOnCall map[int]struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePresignClient) PresignDeleteObject(arg1 context.Context, arg2 *s3.DeleteObjectInput, arg3 ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error) {
	fake.presignDeleteObjectMutex.Lock()
	ret, specificReturn := fake.presignDeleteObjectReturnsOnCall[len(fake.presignDeleteObjectArgsForCall)]
	fake.presignDeleteObjectArgsForCall = append(fake.presignDeleteObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.DeleteObjectInput
		arg3 []func(*s3.PresignOptions)
	}{arg1, arg2, arg3})
	stub := fake.PresignDeleteObjectStub
	fakeReturns := fake.presignDeleteObjectReturns
	fake.recordInvocation("PresignDeleteObject", []interface{}{arg1, arg2, arg3})
	fake.presignDeleteObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePresignClient) PresignDeleteObjectCallCount() int {
	fake.presignDeleteObjectMutex.RLock()
	defer fake.presignDeleteObjectMutex.RUnlock()
	return len(fake.presignDeleteObjectArgsForCall)
}

func (fake *FakePresignClient) PresignDeleteObjectCalls(stub func(context.Context, *s3.DeleteObjectInput, ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error)) {
	fake.presignDeleteObjectMutex.Lock()
	defer fake.presignDeleteObjectMutex.Unlock()
	fake.PresignDeleteObjectStub = stub
}

func (fake *FakePresignClient) PresignDeleteObjectArgsForCall(i int) (context.Context, *s3.DeleteObjectInput, []func(*s3.PresignOptions)) {
	fake.presignDeleteObjectMutex.RLock()
	defer fake.presignDeleteObjectMutex.RUnlock()
	argsForCall := fake.presignDeleteObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePresignClient) PresignDeleteObjectReturns(result1 *v4.PresignedHTTPRequest, result2 error) {
	fake.presignDeleteObjectMutex.Lock()
	defer fake.presignDeleteObjectMutex.Unlock()
	fake.PresignDeleteObjectStub = nil
	fake.presignDeleteObjectReturns = struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}{result1, result2}
}

func (fake *FakePresignClient) PresignDeleteObjectReturnsOnCall(i int, result1 *v4.PresignedHTTPRequest, result2 error) {
	fake.presignDeleteObjectMutex.Lock()
	defer fake.presignDeleteObjectMutex.Unlock()
	fake.PresignDeleteObjectStub = nil
	if fake.presignDeleteObjectReturnsOnCall == nil {
		fake.presignDeleteObjectReturnsOnCall = make(map[int]struct {
			result1 *v4.PresignedHTTPRequest
			result2 error
		})
	}
	fake.presignDeleteObjectReturnsOnCall[i] = struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}{result1, result2}
}

func (fake *FakePresignClient) PresignGetObject(arg1 context.Context, arg2 *s3.GetObjectInput, arg3 ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error) {
	fake.presignGetObjectMutex.Lock()
	ret, specificReturn := fake.presignGetObjectReturnsOnCall[len(fake.presignGetObjectArgsForCall)]
	fake.presignGetObjectArgsForCall = append(fake.presignGetObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.GetObjectInput
		arg3 []func(*s3.PresignOptions)
	}{arg1, arg2, arg3})
	stub := fake.PresignGetObjectStub
	fakeReturns := fake.presignGetObjectReturns
	fake.recordInvocation("PresignGetObject", []interface{}{arg1, arg2, arg3})
	fake.presignGetObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePresignClient) PresignGetObjectCallCount() int {
	fake.presignGetObjectMutex.RLock()
	defer fake.presignGetObjectMutex.RUnlock()
	return len(fake.presignGetObjectArgsForCall)
}

func (fake *FakePresignClient) PresignGetObjectCalls(stub func(context.Context, *s3.GetObjectInput, ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error)) {
	fake.presignGetObjectMutex.Lock()
	defer fake.presignGetObjectMutex.Unlock()
	fake.PresignGetObjectStub = stub
}

func (fake *FakePresignClient) PresignGetObjectArgsForCall(i int) (context.Context, *s3.GetObjectInput, []func(*s3.PresignOptions)) {
	fake.presignGetObjectMutex.RLock()
	defer fake.presignGetObjectMutex.RUnlock()
	argsForCall := fake.presignGetObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePresignClient) PresignGetObjectReturns(result1 *v4.PresignedHTTPRequest, result2 error) {
	fake.presignGetObjectMutex.Lock()
	defer fake.presignGetObjectMutex.Unlock()
	fake.PresignGetObjectStub = nil
	fake.presignGetObjectReturns = struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}{result1, result2}
}

func (fake *FakePresignClient) PresignGetObjectReturnsOnCall(i int, result1 *v4.PresignedHTTPRequest, result2 error) {
	fake.presignGetObjectMutex.Lock()
	defer fake.presignGetObjectMutex.Unlock()
	fake.PresignGetObjectStub = nil
	if fake.presignGetObjectReturnsOnCall == nil {
		fake.presignGetObjectReturnsOnCall = make(map[int]struct {
			result1 *v4.PresignedHTTPRequest
			result2 error
		})
	}
	fake.presignGetObjectReturnsOnCall[i] = struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}{result1, result2}
}

func (fake *FakePresignClient) PresignPutObject(arg1 context.Context, arg2 *s3.PutObjectInput, arg3 ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error) {
	fake.presignPutObjectMutex.Lock()
	ret, specificReturn := fake.presignPutObjectReturnsOnCall[len(fake.presignPutObjectArgsForCall)]
	fake.presignPutObjectArgsForCall = append(fake.presignPutObjectArgsForCall, struct {
		arg1 context.Context
		arg2 *s3.PutObjectInput
		arg3 []func(*s3.PresignOptions)
	}{arg1, arg2, arg3})
	stub := fake.PresignPutObjectStub
	fakeReturns := fake.presignPutObjectReturns
	fake.recordInvocation("PresignPutObject", []interface{}{arg1, arg2, arg3})
	fake.presignPutObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePresignClient) PresignPutObjectCallCount() int {
	fake.presignPutObjectMutex.RLock()
	defer fake.presignPutObjectMutex.RUnlock()
	return len(fake.presignPutObjectArgsForCall)
}

func (fake *FakePresignClient) PresignPutObjectCalls(stub func(context.Context, *s3.PutObjectInput, ...func(*s3.PresignOptions)) (*v4.PresignedHTTPRequest, error)) {
	fake.presignPutObjectMutex.Lock()
	defer fake.presignPutObjectMutex.Unlock()
	fake.PresignPutObjectStub = stub
}

func (fake *FakePresignClient) PresignPutObjectArgsForCall(i int) (context.Context, *s3.PutObjectInput, []func(*s3.PresignOptions)) {
	fake.presignPutObjectMutex.RLock()
	defer fake.presignPutObjectMutex.RUnlock()
	argsForCall := fake.presignPutObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePresignClient) PresignPutObjectReturns(result1 *v4.PresignedHTTPRequest, result2 error) {
	fake.presignPutObjectMutex.Lock()
	defer fake.presignPutObjectMutex.Unlock()
	fake.PresignPutObjectStub = nil
	fake.presignPutObjectReturns = struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}{result1, result2}
}

func (fake *FakePresignClient) PresignPutObjectReturnsOnCall(i int, result1 *v4.PresignedHTTPRequest, result2 error) {
	fake.presignPutObjectMutex.Lock()
	defer fake.presignPutObjectMutex.Unlock()
	fake.PresignPutObjectStub = nil
	if fake.presignPutObjectReturnsOnCall == nil {
		fake.presignPutObjectReturnsOnCall = make(map[int]struct {
			result1 *v4.PresignedHTTPRequest
			result2 error
		})
	}
	fake.presignPutObjectReturnsOnCall[i] = struct {
		result1 *v4.PresignedHTTPRequest
		result2 error
	}{result1, result2}
}

func (fake *FakePresignClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.presignDeleteObjectMutex.RLock()
	defer fake.presignDeleteObjectMutex.RUnlock()
	fake.presignGetObjectMutex.RLock()
	defer fake.presignGetObjectMutex.RUnlock()
	fake.presignPutObjectMutex.RLock()
	defer fake.presignPutObjectMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePresignClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ presigner.PresignClient = new(FakePresignClient)
